---

AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation Vpc ALB EC2 Go Example

Parameters:
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  DesiredCapacity:
    Type: Number
    Default: 2
    MinValue: 0
    MaxValue: 10
  MinSize:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 10
  MaxSize:
    Type: Number
    Default: 10
    MinValue: 0
    MaxValue: 10
  CreateVpcEndpoints:
    Type: String
    Default: true
    Description: Whether or not to create VPC endpoints for SSM access to the EC2 in private subnet
  RuleAction:
    Type: String
    Description: The default action you want to apply for the rules created by this stack
    AllowedValues:
      - ALLOW
      - BLOCK
      - COUNT
    Default: ALLOW
  Environment:
    Type: String
    Description: The name of the Environment this stack belongs to
    AllowedValues:
      - DEV
      - PROD
    Default: DEV

Conditions:
  ShouldCreateVpcEndpoints: !Equals [!Ref CreateVpcEndpoints, true]
  DefaultAllow: !Equals [!Ref RuleAction, "ALLOW"]


Resources:

  # role and instance profile
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-iam-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-instance-profile
      Roles:
        - !Ref InstanceRole

  # vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  # subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
        - Key: stackName
          Value: !Ref "AWS::StackName"
        - Key: environment
          Value: !Ref Environment

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: Private Subnet 1
        - Key: stackName
          Value: !Ref "AWS::StackName"
        - Key: environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
        - Key: stackName
          Value: !Ref "AWS::StackName"
        - Key: environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2
        - Key: stackName
          Value: !Ref "AWS::StackName"
        - Key: environment
          Value: !Ref Environment

  # routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table
        - Key: stackName
          Value: !Ref "AWS::StackName"
        - Key: environment
          Value: !Ref Environment

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-IG
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # nat
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-NG
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  # EC2 and ALB Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ALB-SG
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-EC2-SG
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ALBSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ALBSecurityGroup
          - GroupId

  # Target Group, Listener and Application  Load Balancer
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: !Sub ${AWS::StackName}-TG
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: load_balancing.algorithm.type
        Value: least_outstanding_requests
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-TG
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ALB
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment

  # waf
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${AWS::StackName}-WebACL
      Scope: REGIONAL  # Or CLOUDFRONT for CloudFront distributions
      DefaultAction:
        Fn::If:
          - DefaultAllow
          - Allow: {}
          - Block: {}
      Rules:
      - Name: RuleWithAWSManagedRules
        Priority: 0
        OverrideAction:
          Count: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: RuleWithAWSManagedRulesMetric
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesCommonRuleSet
            ExcludedRules: []
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub ${AWS::StackName}-WebACLMetric
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebACL
        - Key: stackName
          Value: !Ref "AWS::StackName"
        - Key: environment
          Value: !Ref Environment

  IPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: !Sub ${AWS::StackName}-IPSet
      Scope: REGIONAL
      IPAddressVersion: IPV4
      Addresses: [] # empty list allows all ips

  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref ApplicationLoadBalancer
      WebACLArn: !GetAtt WebACL.Arn

  # launch template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3.small
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        Monitoring:
          Enabled: true
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash -xe
              # Install Go
              sudo yum update -y
              sudo yum install -y golang
              # Clone your application
              cd ~
              git clone https://github.com/pawong/cloudformation-vpc-alb-ec2-go-example.git/
              # Change directory to the application
              cd cloudformation-vpc-alb-ec2-go-example/src
              # Build your Go application
              export GIT_HASH=$(git rev-parse --short HEAD)
              export GOPATH=~/go
              export GOCACHE=~/.cache/go
              go build -o main main.go
              # Run your Go application (you might want to set this up as a service)
              ./main &

  # auto scaling
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-instance
        PropagateAtLaunch: true
      - Key: stackName
        Value: !Ref "AWS::StackName"
      - Key: environment
        Value: !Ref Environment
      TargetGroupARNs:
        - !Ref AlbTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      AvailabilityZones:
        - !Select [ 0, !GetAZs ]
        - !Select [ 1, !GetAZs ]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DesiredCapacity: !Sub ${DesiredCapacity}
      MinSize: !Sub ${MinSize}
      MaxSize: !Sub ${MaxSize}

  #
  # VPC endpoints
  #

  SecurityGroupVpcEndpoint:
    Type: AWS::EC2::SecurityGroup
    Condition: ShouldCreateVpcEndpoints
    Properties:
      GroupDescription: !Sub Security Group for ${AWS::StackName} VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt VPC.CidrBlock

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVpcEndpoints
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVpcEndpoints
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint

  KMSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVpcEndpoints
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVpcEndpoints
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint
